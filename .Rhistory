}
return(p)
}
plot_offer_curve(x=Megawatts, y=DollarsPerMegawattHour, group=ParticipantCode)
plot_offer_curve(x=DollarsPerMegawattHour, y=Megawatts, group=ParticipantCode)
plot_offer_curve <- function(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group=NULL) {
#check data
if (!is.data.frame(data)){
tryCatch({
data = data.frame(data)
}, error = function(e) {
message('Check input is a data.frame object')
return(NA)
})
}
if (!(all(c(x,y) %in% colnames(data)))){
stop('columns not found in data. check column names')
}
if (!is.numeric(data[[x]])){
stop('argument x needs to be of numeric type')
}
#plot
x = dplyr::sym(x)
y = dplyr::sym(y)
if (is.null(group)){
data = data %>% dplyr::group_by(!!y) %>% dplyr::summarise(X = sum(!!x), .groups = 'drop') %>% dplyr::mutate(X = cumsum(X))
p = ggplot2::ggplot(data=data, ggplot2::aes(x = X, y = !!y)) +
ggplot2::geom_line(size = 0.8) +
ggplot2::xlab(x) +
ggplot2::theme_minimal()
} else {
if (!(group %in% colnames(data))){
stop(paste(group, "not found in data. check column names"))
}
group = dplyr::sym(group)
data = data %>% dplyr::group_by(!!y, !!group) %>% dplyr::summarise(X = sum(!!x), .groups = 'drop')
data = data %>% dplyr::group_by(!!group) %>% dplyr::mutate(X = cumsum(X))
p = ggplot2::ggplot(data=data, ggplot2::aes(x = X, y = !!y, color=!!group)) +
ggplot2::geom_line(size = 0.8) +
ggplot2::xlab(x) +
ggplot2::theme_minimal()
}
return(p)
}
plot_offer_curve(x=Megawatts, y=DollarsPerMegawattHour, group=ParticipantCode)
plot_offer_curve <- function(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group=NULL) {
#check data
if (!is.data.frame(data)){
tryCatch({
data = data.frame(data)
}, error = function(e) {
message('Check input is a data.frame object')
return(NA)
})
}
if (!(all(c(x,y) %in% colnames(data)))){
stop('columns not found in data. check column names')
}
if (!is.numeric(data[[x]])){
stop('argument x needs to be of numeric type')
}
#plot
# x = dplyr::sym(x)
# y = dplyr::sym(y)
# if (is.null(group)){
#   data = data %>% dplyr::group_by(!!y) %>% dplyr::summarise(X = sum(!!x), .groups = 'drop') %>% dplyr::mutate(X = cumsum(X))
#   p = ggplot2::ggplot(data=data, ggplot2::aes(x = X, y = !!y)) +
#     ggplot2::geom_line(size = 0.8) +
#      ggplot2::xlab(x) +
#       ggplot2::theme_minimal()
# } else {
#   if (!(group %in% colnames(data))){
#     stop(paste(group, "not found in data. check column names"))
#   }
#   group = dplyr::sym(group)
#   data = data %>% dplyr::group_by(!!y, !!group) %>% dplyr::summarise(X = sum(!!x), .groups = 'drop')
#   data = data %>% dplyr::group_by(!!group) %>% dplyr::mutate(X = cumsum(X))
#   p = ggplot2::ggplot(data=data, ggplot2::aes(x = X, y = !!y, color=!!group)) +
#     ggplot2::geom_line(size = 0.8) +
#      ggplot2::xlab(x) +
#       ggplot2::theme_minimal()
# }
return(p)
}
plot_offer_curve(x=Megawatts, y=DollarsPerMegawattHour, group=ParticipantCode)
class(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour'))
plot_offer_curve <- function(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group=NULL) {
#check data
if (!is.data.frame(data)){
tryCatch({
data = data.frame(data)
}, error = function(e) {
message('Check input is a data.frame object')
return(NA)
})
}
if (!(all(c(x,y) %in% colnames(data)))){
stop('columns not found in data. check column names')
}
if (!is.numeric(data[[x]])){
stop('argument x needs to be of numeric type')
}
#plot
x = dplyr::sym(x)
y = dplyr::sym(y)
if (is.null(group)){
data = data %>% dplyr::group_by(!!y) %>% dplyr::summarise(X = sum(!!x), .groups = 'drop') %>% dplyr::mutate(X = cumsum(X))
p = ggplot2::ggplot(data=data, ggplot2::aes(x = X, y = !!y)) +
ggplot2::geom_line(size = 0.8) +
ggplot2::xlab(x) +
ggplot2::theme_minimal()
} else {
if (!(group %in% colnames(data))){
stop(paste(group, "not found in data. check column names"))
}
group = dplyr::sym(group)
data = data %>% dplyr::group_by(!!y, !!group) %>% dplyr::summarise(X = sum(!!x), .groups = 'drop')
data = data %>% dplyr::group_by(!!group) %>% dplyr::mutate(X = cumsum(X))
p = ggplot2::ggplot(data=data, ggplot2::aes(x = X, y = !!y, color=!!group)) +
ggplot2::geom_line(size = 0.8) +
ggplot2::xlab(x) +
ggplot2::theme_minimal()
}
return(p)
}
plot_offer_curve(data = offers, x = "Megawatts", y = "DollarsPerMegawattHour")
plot_offer_curve <- function(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group=NULL) {
#check data
if (!is.data.frame(data)){
tryCatch({
data = data.frame(data)
}, error = function(e) {
message('Check input is a data.frame object')
return(NA)
})
}
if (!(all(c(x,y) %in% colnames(data)))){
stop('columns not found in data. check column names')
}
if (!is.numeric(data[[x]])){
stop('argument x needs to be of numeric type')
}
#plot
x = dplyr::sym(x)
y = dplyr::sym(y)
if (is.null(group)){
data = data %>% dplyr::group_by(!!y) %>% dplyr::summarise(X = sum(!!x), .groups = 'drop') %>% dplyr::mutate(X = cumsum(X))
p = ggplot2::ggplot(data=data, ggplot2::aes(x = X, y = !!y)) +
ggplot2::geom_line(size = 0.8) +
ggplot2::xlab(x) +
ggplot2::theme_minimal()
} else {
if (!(group %in% colnames(data))){
stop(paste(group, "not found in data. check column names"))
}
group = dplyr::sym(group)
data = data %>% dplyr::group_by(!!y, !!group) %>% dplyr::summarise(X = sum(!!x), .groups = 'drop')
data = data %>% dplyr::group_by(!!group) %>% dplyr::mutate(X = cumsum(X))
p = ggplot2::ggplot(data=data, ggplot2::aes(x = X, y = !!y, color=!!group)) +
ggplot2::geom_line(size = 0.8) +
ggplot2::xlab(x) +
ggplot2::theme_minimal()
}
return(p)
}
class(plot_offer_curve(data = offers, x = "Megawatts", y = "DollarsPerMegawattHour"))
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::test(test-plot_offer_curve)
devtools::test('test-plot_offer_curve')
expect_s3_class(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour'), 'ggplot')
expect_s3_class(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour'), 'ggplot')
test_that("Valid inputs for plot_offer_curve succeed as expected", {
expect_s3_class(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour'), 'ggplot')
plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='ParticipantCode')
plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='TradingPeriod')
plot_offer_curve(data = offers, x='DollarsPerMegawattHour', y='Megawatts', group='ParticipantCode')
})
test_that("plot_offer_curve plots as expected", {
p <- plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour')
vdiffr::expect_doppelganger("default_curve", p)
})
test_that("Valid inputs for plot_offer_curve succeed as expected", {
expect_s3_class(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour'), 'ggplot')
plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='ParticipantCode')
plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='TradingPeriod')
plot_offer_curve(data = offers, x='DollarsPerMegawattHour', y='Megawatts', group='ParticipantCode')
})
test_that("Valid inputs for plot_offer_curve succeed as expected", {
expect_s3_class(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour'), 'ggplot')
expect_s3_class(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='ParticipantCode'), 'ggplot')
expect_s3_class(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='TradingPeriod'), 'ggplot')
expect_s3_class(plot_offer_curve(data = offers, x='DollarsPerMegawattHour', y='Megawatts', group='ParticipantCode'), 'ggplot')
})
ggplot2(offers)
ggplot2::ggplot2(offers)
ggplot::ggplot2(offers)
load("~/GitHub/nz_elec_offers/data/offers.rda")
ggplot2::ggplot(data=doffers)
ggplot2::ggplot(data=offers)
as.data.frame(ggplot2::ggplot(data=offers))
devtools::test()
plot_offer_curve(data = ggplot2::ggplot(data=offers))
!is.data.frame(data = ggplot2::ggplot(data=offers))
is.data.frame(data = ggplot2::ggplot(data=offers))
is.data.frame(ggplot2::ggplot(data=offers))
data.frame(ggplot2::ggplot(data=offers))
expect_error(plot_offer_curve(data = (ggplot2::ggplot(data=offers))), "Check input is a data.frame object")
test_that("Invalid inputs for plot_offer_curve fail as expected", {
expect_error(plot_offer_curve(data = (ggplot2::ggplot(data=offers))), "Check input is a data.frame object")
expect_error(plot_offer_curve(data = offers, x='Test', y='DollarsPerMegawattHour'), "columns not found in data. check column names")
expect_error(plot_offer_curve(data = offers,  x='PointOfConnection', y='DollarsPerMegawattHour'), "argument x needs to be of numeric type")
expect_error(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='Test'), "not found in data. check column names")
})
test_that("Invalid inputs for plot_offer_curve fail as expected", {
expect_error(plot_offer_curve(data = (ggplot2::ggplot(data=offers))), "Check input is a data.frame object")
expect_error(plot_offer_curve(data = offers, x='Test', y='DollarsPerMegawattHour'), "columns not found in data. check column names")
expect_error(plot_offer_curve(data = offers,  x='PointOfConnection', y='DollarsPerMegawattHour'), "argument x needs to be of numeric type")
expect_error(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='Test'), "not found in data. check column names")
})
as.data.frame(ggplot2::ggplot(data=offers))
devtools::load_all()
devtools::test()
test_that("Invalid inputs for plot_offer_curve fail as expected", {
expect_error(plot_offer_curve(data = (ggplot2::ggplot(data=offers))), "Check input is a data.frame object")
expect_error(plot_offer_curve(data = offers, x='Test', y='DollarsPerMegawattHour'), "columns not found in data. check column names")
expect_error(plot_offer_curve(data = offers,  x='PointOfConnection', y='DollarsPerMegawattHour'), "argument x needs to be of numeric type")
expect_error(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='Test'), "not found in data. check column names")
})
test_that("Invalid inputs for plot_offer_curve fail as expected", {
p = ggplot2::ggplot(data=offers)
expect_error(plot_offer_curve(data = p), "Check input is a data.frame object")
expect_error(plot_offer_curve(data = offers, x='Test', y='DollarsPerMegawattHour'), "columns not found in data. check column names")
expect_error(plot_offer_curve(data = offers,  x='PointOfConnection', y='DollarsPerMegawattHour'), "argument x needs to be of numeric type")
expect_error(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='Test'), "not found in data. check column names")
})
p = ggplot2::ggplot(data=offers)
plot_offer_curve(data = p)
plot_offer_curve(p)
test_that("Invalid inputs for plot_offer_curve fail as expected", {
p = ggplot2::ggplot(data=offers)
expect_error(plot_offer_curve(data = p), "Check input is a data.frame object")
expect_error(plot_offer_curve(data = offers, x='Test', y='DollarsPerMegawattHour'), "columns not found in data. check column names")
expect_error(plot_offer_curve(data = offers,  x='PointOfConnection', y='DollarsPerMegawattHour'), "argument x needs to be of numeric type")
expect_error(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='Test'), "not found in data. check column names")
})
plot_offer_curve(p)
test_that("Invalid inputs for plot_offer_curve fail as expected", {
p = ggplot2::ggplot(data=offers)
expect_message(plot_offer_curve(data = p), "Check input is a data.frame object")
expect_error(plot_offer_curve(data = offers, x='Test', y='DollarsPerMegawattHour'), "columns not found in data. check column names")
expect_error(plot_offer_curve(data = offers,  x='PointOfConnection', y='DollarsPerMegawattHour'), "argument x needs to be of numeric type")
expect_error(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='Test'), "not found in data. check column names")
})
test_that("Invalid inputs for plot_offer_curve fail as expected", {
p = ggplot2::ggplot(data=offers)
expect_message(plot_offer_curve(data = p), "Check input is a data.frame object")
expect_error(plot_offer_curve(data = offers, x='Test', y='DollarsPerMegawattHour'), "columns not found in data. check column names")
expect_error(plot_offer_curve(data = offers,  x='PointOfConnection', y='DollarsPerMegawattHour'), "argument x needs to be of numeric type")
expect_error(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='Test'), "not found in data. check column names")
})
devtools::test()
devtools::load_all()
devtools::test()
load("~/GitHub/nz_elec_offers/data/demand.rda")
View(offers)
plot_offer_curve(data=demand, 'Megawatts', 'TradingDate')
View(demand)
plot_offer_curve(data=demand, 'MegawattHours', 'TradingDate')
test_that("Invalid inputs for plot_offer_curve fail as expected", {
p = ggplot2::ggplot(data=offers)
expect_error(plot_offer_curve(data = p), "Check input is a data.frame object")
expect_error(plot_offer_curve(data = offers, x='Test', y='DollarsPerMegawattHour'), "columns not found in data. check column names")
expect_error(plot_offer_curve(data = offers,  x='PointOfConnection', y='DollarsPerMegawattHour'), "argument x needs to be of numeric type")
expect_error(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='Test'), "not found in data. check column names")
expect_message(plot_offer_curve(data=demand, 'MegawattHours', 'TradingDate'), 'geom_path')
})
test_that("Invalid inputs for plot_offer_curve fail as expected", {
p = ggplot2::ggplot(data=offers)
expect_error(plot_offer_curve(data = p), "Check input is a data.frame object")
expect_error(plot_offer_curve(data = offers, x='Test', y='DollarsPerMegawattHour'), "columns not found in data. check column names")
expect_error(plot_offer_curve(data = offers,  x='PointOfConnection', y='DollarsPerMegawattHour'), "argument x needs to be of numeric type")
expect_error(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='Test'), "not found in data. check column names")
expect_warning(plot_offer_curve(data=demand, 'MegawattHours', 'TradingDate'), 'geom_path')
})
test_that("Invalid inputs for plot_offer_curve fail as expected", {
p = ggplot2::ggplot(data=offers)
expect_error(plot_offer_curve(data = p), "Check input is a data.frame object")
expect_error(plot_offer_curve(data = offers, x='Test', y='DollarsPerMegawattHour'), "columns not found in data. check column names")
expect_error(plot_offer_curve(data = offers,  x='PointOfConnection', y='DollarsPerMegawattHour'), "argument x needs to be of numeric type")
expect_error(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='Test'), "not found in data. check column names")
expect_error(plot_offer_curve(data=demand, 'MegawattHours', 'TradingDate'), 'geom_path')
})
test_that("Invalid inputs for plot_offer_curve fail as expected", {
p = ggplot2::ggplot(data=offers)
expect_error(plot_offer_curve(data = p), "Check input is a data.frame object")
expect_error(plot_offer_curve(data = offers, x='Test', y='DollarsPerMegawattHour'), "columns not found in data. check column names")
expect_error(plot_offer_curve(data = offers,  x='PointOfConnection', y='DollarsPerMegawattHour'), "argument x needs to be of numeric type")
expect_error(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='Test'), "not found in data. check column names")
expect_condition(plot_offer_curve(data=demand, 'MegawattHours', 'TradingDate'), 'geom_path')
})
test_that("Invalid inputs for plot_offer_curve fail as expected", {
p = ggplot2::ggplot(data=offers)
expect_error(plot_offer_curve(data = p), "Check input is a data.frame object")
expect_error(plot_offer_curve(data = offers, x='Test', y='DollarsPerMegawattHour'), "columns not found in data. check column names")
expect_error(plot_offer_curve(data = offers,  x='PointOfConnection', y='DollarsPerMegawattHour'), "argument x needs to be of numeric type")
expect_error(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='Test'), "not found in data. check column names")
expect_visible(plot_offer_curve(data=demand, 'MegawattHours', 'TradingDate'), 'geom_path')
})
test_that("Invalid inputs for plot_offer_curve fail as expected", {
p = ggplot2::ggplot(data=offers)
expect_error(plot_offer_curve(data = p), "Check input is a data.frame object")
expect_error(plot_offer_curve(data = offers, x='Test', y='DollarsPerMegawattHour'), "columns not found in data. check column names")
expect_error(plot_offer_curve(data = offers,  x='PointOfConnection', y='DollarsPerMegawattHour'), "argument x needs to be of numeric type")
expect_error(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='Test'), "not found in data. check column names")
expect_visible(plot_offer_curve(data=demand, 'MegawattHours', 'TradingDate'))
})
plot_offer_curve(data = offers,  x=Megawatts, y=DollarsPerMegawattHour)
test_that("Invalid inputs for plot_offer_curve fail as expected", {
p = ggplot2::ggplot(data=offers)
expect_error(plot_offer_curve(data = p), "Check input is a data.frame object")
expect_error(plot_offer_curve(data = offers, x='Test', y='DollarsPerMegawattHour'), "columns not found in data. check column names")
expect_error(plot_offer_curve(data = offers,  x='PointOfConnection', y='DollarsPerMegawattHour'), "argument x needs to be of numeric type")
expect_error(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='Test'), "not found in data. check column names")
expect_error(plot_offer_curve(data = offers,  x=Megawatts, y=DollarsPerMegawattHour), "not found")
expect_visible(plot_offer_curve(data=demand, 'MegawattHours', 'TradingDate'))
})
test_that("Valid inputs for plot_offer_curve succeed as expected", {
expect_s3_class(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour'), 'ggplot')
expect_s3_class(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='ParticipantCode'), 'ggplot')
expect_s3_class(plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='TradingPeriod'), 'ggplot')
expect_s3_class(plot_offer_curve(data = offers, x='DollarsPerMegawattHour', y='Megawatts', group='ParticipantCode'), 'ggplot')
})
test_that("plot_offer_curve plots as expected", {
p <- plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour')
vdiffr::expect_doppelganger("default_curve", p)
})
devtools::test()
class(create_report())
test_that("create_report results as expected", {
expect_invisible(create_report())
#expect_identical(ymd(c("2021-05-03","2022-06-25")), as.Date(c("2021-05-03", "2022-06-25")))
})
test_that("create_report results as expected", {
expect_invisible(create_report())
expect_output(create_report())
})
test_that("create_report results as expected", {
expect_invisible(create_report())
expect_output(create_report())
expect_silent(create_report())
})
test_that("create_report results as expected", {
#expect_invisible(create_report())
#expect_output(create_report())
expect_silent(create_report())
})
test_that("Valid inputs for create_report succeed as expected", {
#expect_invisible(create_report())
#expect_invisible(create_report(data = offers, response = 'DollarsPerMegawattHour', report_title = "Report", output_dir = getwd(), output_file = "report.html"))
expect_invisible(create_report(data = offers, response = 'Megawatts'))
})
View(demand)
View(offers)
View(demand)
test_that("Invalid inputs for create_report fail as expected", {
#expect_error(create_report(data = offers, response = 'Test'), "not found in data")
#expect_error(create_report(data = demand, response = 'MegawattHours'), "First argument to ymd must be a date string or a vector of date strings.")
expect_error(create_report(output_dir='Test'), "First argument to ymd must be a date string or a vector of date strings.")
})
test_that("Invalid inputs for create_report fail as expected", {
#expect_error(create_report(data = offers, response = 'Test'), "not found in data")
#expect_error(create_report(data = demand, response = 'MegawattHours'), "First argument to ymd must be a date string or a vector of date strings.")
expect_error(create_report(output_dir='C:/Test'), "First argument to ymd must be a date string or a vector of date strings.")
})
test_that("Invalid inputs for create_report fail as expected", {
#expect_error(create_report(data = offers, response = 'Test'), "not found in data")
expect_error(create_report(data = demand, response = 'MegawattHours'), "")
})
test_that("Invalid inputs for create_report fail as expected", {
#expect_error(create_report(data = offers, response = 'Test'), "not found in data")
expect_error(create_report(data = demand, response = 'MegawattHours'), "tesst")
})
View(demand)
test_that("Invalid inputs for create_report fail as expected", {
#expect_error(create_report(data = offers, response = 'Test'), "not found in data")
expect_error(create_report(data = demand, response = 'MegawattHours'), "tesst")
})
test_that("Invalid inputs for create_report fail as expected", {
#expect_error(create_report(data = offers, response = 'Test'), "not found in data")
expect_error(create_report(data = demand, response = 'MegawattHours'), "tesst")
})
test_that("Invalid inputs for create_report fail as expected", {
#expect_error(create_report(data = offers, response = 'Test'), "not found in data")
expect_error(create_report(data = demand, response = 'MegawattHours'), "tesst")
})
devtools::load_all()
devtools::test()
test_that("Invalid inputs for create_report fail as expected", {
#expect_error(create_report(data = offers, response = 'Test'), "not found in data")
expect_error(create_report(data = demand, response = 'MegawattHours'), "tesst")
})
test_that("create_report results as expected", {
expect_invisible(create_report())
expect_output(create_report())
})
test_that("create_report results as expected", {
#  expect_invisible(create_report())
expect_output(create_report())
})
test_that("create_report results as expected", {
#  expect_invisible(create_report())
expect_output(create_report())
})
test_that("create_report results as expected", {
#  expect_invisible(create_report())
expect_output(create_report())
})
---
params:
data: data
test_that("create_report results as expected", {
#  expect_invisible(create_report())
expect_output(create_report())
})
devtools::load_all()
test_that("create_report results as expected", {
#  expect_invisible(create_report())
expect_output(create_report())
})
test_that("create_report results as expected", {
#expect_invisible(create_report())
expect_output(create_report())
})
devtools::document()
devtools::document()
format_data('C:/Users/jenly/Downloads/Offers/20211106_Offers.csv')
format_data('C:/Users/jenly/Downloads/20211106_Offers.csv')
?format_data()
?print()
devtools::document()
?format_data()
devtools::document()
usethis::use_vignette("vignette")
plot_offer_curve(data = data, x='Megawatts', y='DollarsPerMegawattHour', group=ParticipantCode)
plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group=ParticipantCode)
View(offers)
plot_offer_curve(data = data, x='Megawatts', y='DollarsPerMegawattHour', group='ParticipantCode')
plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='ParticipantCode')
library(offers)
system.file("vignettes/offer_curve.png", package = "offers")
library("png")
pp = readPNG(system.file("vignettes/offer_curve.png", package = "offers"))
plot.new()
rasterImage(pp,0,0,1,1)
library("png")
pp = readPNG(system.file("vignettes/offer_curve.png", package = "offers"))
plot.new()
rasterImage(pp,0,0,1,1)
anomaly_detect(data = offers, x = 'Datetime', y = 'VWAP')
pp2 = readPNG(system.file("vignettes/anomaly_detect1.png", package = "offers"))
pp3 = readPNG(system.file("vignettes/anomaly_detect2.png", package = "offers"))
plot.new()
rasterImage(pp2,0,0,1,1)
rasterImage(pp3,0,0,1,1)
pp2 = readPNG(system.file("vignettes/anomaly_detect1.png", package = "offers"))
pp3 = readPNG(system.file("vignettes/anomaly_detect2.png", package = "offers"))
plot.new()
rasterImage(pp2,0,0,1,1)
rasterImage(pp3,0,0,1,1)
pp2 = readPNG(system.file("vignettes/anomaly_detect1.png", package = "offers"))
pp3 = readPNG(system.file("vignettes/anomaly_detect2.png", package = "offers"))
plot.new()
rasterImage(pp2,0,0,1,1)
rasterImage(pp3,0,0,1,1)
pp2 = readPNG(system.file("vignettes/anomaly_detect1.png", package = "offers"))
pp3 = readPNG(system.file("vignettes/anomaly_detect2.png", package = "offers"))
plot.new()
rasterImage(pp2,0,0,1,1)
plot.new()
rasterImage(pp3,0,0,1,1)
devtools::load_all()
devtools::build_rmd()
library(offers)
library("png")
knitr::include_graphics
pp = readPNG(system.file("vignettes/offer_curve.png", package = "offers"))
plot.new()
rasterImage(pp,0,0,1,1)
pp = readPNG(system.file("vignettes/offer_curve.png", package = "offers"))
plot.new()
graphics::rasterImage(pp,0,0,1,1)
pp = readPNG(system.file("vignettes/offer_curve.png", package = "offers"))
plot.new()
graphics::rasterImage(pp,0,0,1,1)
plot.show()
rmarkdown::render("vignette.Rmd")
rmarkdown::render("vignettes/vignette.Rmd")
rmarkdown::render("yourfilename.Rmd")
rmarkdown::render("vignettes/vignette.Rmd")
rmarkdown::render("vignettes/vignette.Rmd")
#pp = readPNG(system.file("vignettes/offer_curve.png", package = "offers"))
#plot.new()
#rasterImage(pp,0,0,1,1)
plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='ParticipantCode')
pp = readPNG(system.file("inst/offer_curve.png", package = "offers"))
pp = readPNG(system.file("offer_curve.png", package = "offers"))
plot.new()
rasterImage(pp,0,0,1,1)
#plot_offer_curve(data = offers, x='Megawatts', y='DollarsPerMegawattHour', group='ParticipantCode')
