} else {
data.grp = data %>% dplyr::group_by(Datetime, ParticipantCode) %>% dplyr::summarise(VWAP = sum(Megawatts*DollarsPerMegawattHour)/sum(Megawatts))
}
}
x = enquo(x)
y = enquo(y)
data.grp = data.grp %>% tibble::as_tibble() %>%
dplyr::mutate(x = lubridate::ymd_hms(!!x)) %>%
dplyr::arrange(x) %>%
tibbletime::as_tbl_time(index = x)
decomposed = data.grp %>% anomalize::time_decompose(!!y, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize::anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.1)
decomposed_plot = decomposed %>% anomalize::plot_anomaly_decomposition()
recomposed = data.grp %>% anomalize::time_decompose(!!y) %>%
anomalize::anomalize(remainder) %>%
anomalize::time_recompose()
recomposed_plot = recomposed %>% anomalize::plot_anomalies(time_recomposed = TRUE, ncol = 4, alpha_dots = 0.5)
anomalies = recomposed %>% dplyr::filter(anomaly == 'Yes')
test.anomaly <- function(type ='d') {
if (type == 'd'){
return(decomposed_plot)
} else {
return(recomposed_plot)
}
}
attr(anomalies, "class") <- "anomaly"
anomalies$decompose = decomposed_plot
return(anomalies)
}
a = anomaly_detect()
a
a$decompose
anomaly_detect <- function(data = offers, x = Datetime, y = VWAP, gsplit=FALSE){
#set up for offer data, otherwise leave generic
cols = c('TradingDate', 'TradingPeriod','ParticipantCode','Tranche','Megawatts', 'DollarsPerMegawattHour')
if (all(cols %in% colnames(data))){
data = tidyr::fill(data, .direction = 'updown')
data[data['DollarsPerMegawattHour'] == 0, 'DollarsPerMegawattHour'] = 0.01
#data = data %>% dplyr::group_by(Datetime, ParticipantCode) %>% dplyr::mutate(VWAP = (cumsum(Megawatts*DollarsPerMegawattHour))/(cumsum(Megawatts)), .keep='used')
if (!gsplit){
data.grp = data %>% dplyr::group_by(Datetime) %>% dplyr::summarise(VWAP = sum(Megawatts*DollarsPerMegawattHour)/sum(Megawatts))
} else {
data.grp = data %>% dplyr::group_by(Datetime, ParticipantCode) %>% dplyr::summarise(VWAP = sum(Megawatts*DollarsPerMegawattHour)/sum(Megawatts))
}
}
x = enquo(x)
y = enquo(y)
data.grp = data.grp %>% tibble::as_tibble() %>%
dplyr::mutate(x = lubridate::ymd_hms(!!x)) %>%
dplyr::arrange(x) %>%
tibbletime::as_tbl_time(index = x)
decomposed = data.grp %>% anomalize::time_decompose(!!y, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize::anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.1)
decomposed_plot = decomposed %>% anomalize::plot_anomaly_decomposition()
recomposed = data.grp %>% anomalize::time_decompose(!!y) %>%
anomalize::anomalize(remainder) %>%
anomalize::time_recompose()
recomposed_plot = recomposed %>% anomalize::plot_anomalies(time_recomposed = TRUE, ncol = 4, alpha_dots = 0.5)
anomalies = recomposed %>% dplyr::filter(anomaly == 'Yes')
test.anomaly <- function(type ='d') {
if (type == 'd'){
return(decomposed_plot)
} else {
return(recomposed_plot)
}
}
attr(anomalies, "class") <- "anomaly"
anomalies$decompose = decomposed_plot
anomalies$recompose = recomposed_plot
return(anomalies)
}
a = anomaly_detect()
print(a)
anomaly_detect <- function(data = offers, x = Datetime, y = VWAP, gsplit=FALSE){
#set up for offer data, otherwise leave generic
cols = c('TradingDate', 'TradingPeriod','ParticipantCode','Tranche','Megawatts', 'DollarsPerMegawattHour')
if (all(cols %in% colnames(data))){
data = tidyr::fill(data, .direction = 'updown')
data[data['DollarsPerMegawattHour'] == 0, 'DollarsPerMegawattHour'] = 0.01
#data = data %>% dplyr::group_by(Datetime, ParticipantCode) %>% dplyr::mutate(VWAP = (cumsum(Megawatts*DollarsPerMegawattHour))/(cumsum(Megawatts)), .keep='used')
if (!gsplit){
data.grp = data %>% dplyr::group_by(Datetime) %>% dplyr::summarise(VWAP = sum(Megawatts*DollarsPerMegawattHour)/sum(Megawatts))
} else {
data.grp = data %>% dplyr::group_by(Datetime, ParticipantCode) %>% dplyr::summarise(VWAP = sum(Megawatts*DollarsPerMegawattHour)/sum(Megawatts))
}
}
x = enquo(x)
y = enquo(y)
data.grp = data.grp %>% tibble::as_tibble() %>%
dplyr::mutate(x = lubridate::ymd_hms(!!x)) %>%
dplyr::arrange(x) %>%
tibbletime::as_tbl_time(index = x)
decomposed = data.grp %>% anomalize::time_decompose(!!y, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize::anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.1)
decomposed_plot = decomposed %>% anomalize::plot_anomaly_decomposition()
recomposed = data.grp %>% anomalize::time_decompose(!!y) %>%
anomalize::anomalize(remainder) %>%
anomalize::time_recompose()
recomposed_plot = recomposed %>% anomalize::plot_anomalies(time_recomposed = TRUE, ncol = 4, alpha_dots = 0.5)
anomalies = recomposed %>% dplyr::filter(anomaly == 'Yes')
test.anomaly <- function(type ='d') {
if (type == 'd'){
return(decomposed_plot)
} else {
return(recomposed_plot)
}
}
attr(anomalies, "class") <- "anomaly"
anomalies$decompose = decomposed_plot
anomalies$recompose = recomposed_plot
return(anomalies)
}
print.anomaly <- function(obj){
as.data.frame(obj$Datetime, obj$observed)
}
a = anomaly_detect()
print(a)
anomaly_detect <- function(data = offers, x = Datetime, y = VWAP, gsplit=FALSE){
#set up for offer data, otherwise leave generic
cols = c('TradingDate', 'TradingPeriod','ParticipantCode','Tranche','Megawatts', 'DollarsPerMegawattHour')
if (all(cols %in% colnames(data))){
data = tidyr::fill(data, .direction = 'updown')
data[data['DollarsPerMegawattHour'] == 0, 'DollarsPerMegawattHour'] = 0.01
#data = data %>% dplyr::group_by(Datetime, ParticipantCode) %>% dplyr::mutate(VWAP = (cumsum(Megawatts*DollarsPerMegawattHour))/(cumsum(Megawatts)), .keep='used')
if (!gsplit){
data.grp = data %>% dplyr::group_by(Datetime) %>% dplyr::summarise(VWAP = sum(Megawatts*DollarsPerMegawattHour)/sum(Megawatts))
} else {
data.grp = data %>% dplyr::group_by(Datetime, ParticipantCode) %>% dplyr::summarise(VWAP = sum(Megawatts*DollarsPerMegawattHour)/sum(Megawatts))
}
}
x = enquo(x)
y = enquo(y)
data.grp = data.grp %>% tibble::as_tibble() %>%
dplyr::mutate(x = lubridate::ymd_hms(!!x)) %>%
dplyr::arrange(x) %>%
tibbletime::as_tbl_time(index = x)
decomposed = data.grp %>% anomalize::time_decompose(!!y, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize::anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.1)
decomposed_plot = decomposed %>% anomalize::plot_anomaly_decomposition()
recomposed = data.grp %>% anomalize::time_decompose(!!y) %>%
anomalize::anomalize(remainder) %>%
anomalize::time_recompose()
recomposed_plot = recomposed %>% anomalize::plot_anomalies(time_recomposed = TRUE, ncol = 4, alpha_dots = 0.5)
anomalies = recomposed %>% dplyr::filter(anomaly == 'Yes')
test.anomaly <- function(type ='d') {
if (type == 'd'){
return(decomposed_plot)
} else {
return(recomposed_plot)
}
}
attr(anomalies, "class") <- "anomaly"
anomalies$decompose = decomposed_plot
anomalies$recompose = recomposed_plot
return(anomalies)
}
print.anomaly <- function(obj){
as.table(obj$Datetime, obj$observed)
}
a = anomaly_detect()
print(a)
anomaly_detect <- function(data = offers, x = Datetime, y = VWAP, gsplit=FALSE){
#set up for offer data, otherwise leave generic
cols = c('TradingDate', 'TradingPeriod','ParticipantCode','Tranche','Megawatts', 'DollarsPerMegawattHour')
if (all(cols %in% colnames(data))){
data = tidyr::fill(data, .direction = 'updown')
data[data['DollarsPerMegawattHour'] == 0, 'DollarsPerMegawattHour'] = 0.01
#data = data %>% dplyr::group_by(Datetime, ParticipantCode) %>% dplyr::mutate(VWAP = (cumsum(Megawatts*DollarsPerMegawattHour))/(cumsum(Megawatts)), .keep='used')
if (!gsplit){
data.grp = data %>% dplyr::group_by(Datetime) %>% dplyr::summarise(VWAP = sum(Megawatts*DollarsPerMegawattHour)/sum(Megawatts))
} else {
data.grp = data %>% dplyr::group_by(Datetime, ParticipantCode) %>% dplyr::summarise(VWAP = sum(Megawatts*DollarsPerMegawattHour)/sum(Megawatts))
}
}
x = enquo(x)
y = enquo(y)
data.grp = data.grp %>% tibble::as_tibble() %>%
dplyr::mutate(x = lubridate::ymd_hms(!!x)) %>%
dplyr::arrange(x) %>%
tibbletime::as_tbl_time(index = x)
decomposed = data.grp %>% anomalize::time_decompose(!!y, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize::anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.1)
decomposed_plot = decomposed %>% anomalize::plot_anomaly_decomposition()
recomposed = data.grp %>% anomalize::time_decompose(!!y) %>%
anomalize::anomalize(remainder) %>%
anomalize::time_recompose()
recomposed_plot = recomposed %>% anomalize::plot_anomalies(time_recomposed = TRUE, ncol = 4, alpha_dots = 0.5)
anomalies = recomposed %>% dplyr::filter(anomaly == 'Yes')
test.anomaly <- function(type ='d') {
if (type == 'd'){
return(decomposed_plot)
} else {
return(recomposed_plot)
}
}
attr(anomalies, "class") <- "anomaly"
anomalies$decompose = decomposed_plot
anomalies$recompose = recomposed_plot
return(anomalies)
}
print.anomaly <- function(obj){
table(obj$Datetime, obj$observed)
}
a = anomaly_detect()
print(a)
anomaly_detect <- function(data = offers, x = Datetime, y = VWAP, gsplit=FALSE){
#set up for offer data, otherwise leave generic
cols = c('TradingDate', 'TradingPeriod','ParticipantCode','Tranche','Megawatts', 'DollarsPerMegawattHour')
if (all(cols %in% colnames(data))){
data = tidyr::fill(data, .direction = 'updown')
data[data['DollarsPerMegawattHour'] == 0, 'DollarsPerMegawattHour'] = 0.01
#data = data %>% dplyr::group_by(Datetime, ParticipantCode) %>% dplyr::mutate(VWAP = (cumsum(Megawatts*DollarsPerMegawattHour))/(cumsum(Megawatts)), .keep='used')
if (!gsplit){
data.grp = data %>% dplyr::group_by(Datetime) %>% dplyr::summarise(VWAP = sum(Megawatts*DollarsPerMegawattHour)/sum(Megawatts))
} else {
data.grp = data %>% dplyr::group_by(Datetime, ParticipantCode) %>% dplyr::summarise(VWAP = sum(Megawatts*DollarsPerMegawattHour)/sum(Megawatts))
}
}
x = enquo(x)
y = enquo(y)
data.grp = data.grp %>% tibble::as_tibble() %>%
dplyr::mutate(x = lubridate::ymd_hms(!!x)) %>%
dplyr::arrange(x) %>%
tibbletime::as_tbl_time(index = x)
decomposed = data.grp %>% anomalize::time_decompose(!!y, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize::anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.1)
decomposed_plot = decomposed %>% anomalize::plot_anomaly_decomposition()
recomposed = data.grp %>% anomalize::time_decompose(!!y) %>%
anomalize::anomalize(remainder) %>%
anomalize::time_recompose()
recomposed_plot = recomposed %>% anomalize::plot_anomalies(time_recomposed = TRUE, ncol = 4, alpha_dots = 0.5)
anomalies = recomposed %>% dplyr::filter(anomaly == 'Yes')
test.anomaly <- function(type ='d') {
if (type == 'd'){
return(decomposed_plot)
} else {
return(recomposed_plot)
}
}
attr(anomalies, "class") <- "anomaly"
anomalies$decompose = decomposed_plot
anomalies$recompose = recomposed_plot
return(anomalies)
}
print.anomaly <- function(obj){
data.frame(obj$Datetime, obj$observed)
}
a = anomaly_detect()
print(a)
methods(a)
methods(class="anomaly")
anomaly_detect <- function(data = offers, x = Datetime, y = VWAP, gsplit=FALSE){
#set up for offer data, otherwise leave generic
cols = c('TradingDate', 'TradingPeriod','ParticipantCode','Tranche','Megawatts', 'DollarsPerMegawattHour')
if (all(cols %in% colnames(data))){
data = tidyr::fill(data, .direction = 'updown')
data[data['DollarsPerMegawattHour'] == 0, 'DollarsPerMegawattHour'] = 0.01
#data = data %>% dplyr::group_by(Datetime, ParticipantCode) %>% dplyr::mutate(VWAP = (cumsum(Megawatts*DollarsPerMegawattHour))/(cumsum(Megawatts)), .keep='used')
if (!gsplit){
data.grp = data %>% dplyr::group_by(Datetime) %>% dplyr::summarise(VWAP = sum(Megawatts*DollarsPerMegawattHour)/sum(Megawatts))
} else {
data.grp = data %>% dplyr::group_by(Datetime, ParticipantCode) %>% dplyr::summarise(VWAP = sum(Megawatts*DollarsPerMegawattHour)/sum(Megawatts))
}
}
x = enquo(x)
y = enquo(y)
data.grp = data.grp %>% tibble::as_tibble() %>%
dplyr::mutate(x = lubridate::ymd_hms(!!x)) %>%
dplyr::arrange(x) %>%
tibbletime::as_tbl_time(index = x)
decomposed = data.grp %>% anomalize::time_decompose(!!y, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize::anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.1)
decomposed_plot = decomposed %>% anomalize::plot_anomaly_decomposition()
recomposed = data.grp %>% anomalize::time_decompose(!!y) %>%
anomalize::anomalize(remainder) %>%
anomalize::time_recompose()
recomposed_plot = recomposed %>% anomalize::plot_anomalies(time_recomposed = TRUE, ncol = 4, alpha_dots = 0.5)
anomalies = recomposed %>% dplyr::filter(anomaly == 'Yes')
attr(anomalies, "class") <- "anomaly"
anomalies$decompose = decomposed_plot
anomalies$recompose = recomposed_plot
return(anomalies)
}
print.anomaly <- function(obj){
data.frame(obj$Datetime, obj$observed)
}
plot.anomaly <- function() {
anomalies$decompose
anomalies$recompose
}
a = anomaly_detect()
print(a)
plot(a)
anomaly_detect <- function(data = offers, x = Datetime, y = VWAP, gsplit=FALSE){
#set up for offer data, otherwise leave generic
cols = c('TradingDate', 'TradingPeriod','ParticipantCode','Tranche','Megawatts', 'DollarsPerMegawattHour')
if (all(cols %in% colnames(data))){
data = tidyr::fill(data, .direction = 'updown')
data[data['DollarsPerMegawattHour'] == 0, 'DollarsPerMegawattHour'] = 0.01
#data = data %>% dplyr::group_by(Datetime, ParticipantCode) %>% dplyr::mutate(VWAP = (cumsum(Megawatts*DollarsPerMegawattHour))/(cumsum(Megawatts)), .keep='used')
if (!gsplit){
data.grp = data %>% dplyr::group_by(Datetime) %>% dplyr::summarise(VWAP = sum(Megawatts*DollarsPerMegawattHour)/sum(Megawatts))
} else {
data.grp = data %>% dplyr::group_by(Datetime, ParticipantCode) %>% dplyr::summarise(VWAP = sum(Megawatts*DollarsPerMegawattHour)/sum(Megawatts))
}
}
x = enquo(x)
y = enquo(y)
data.grp = data.grp %>% tibble::as_tibble() %>%
dplyr::mutate(x = lubridate::ymd_hms(!!x)) %>%
dplyr::arrange(x) %>%
tibbletime::as_tbl_time(index = x)
decomposed = data.grp %>% anomalize::time_decompose(!!y, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize::anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.1)
decomposed_plot = decomposed %>% anomalize::plot_anomaly_decomposition()
recomposed = data.grp %>% anomalize::time_decompose(!!y) %>%
anomalize::anomalize(remainder) %>%
anomalize::time_recompose()
recomposed_plot = recomposed %>% anomalize::plot_anomalies(time_recomposed = TRUE, ncol = 4, alpha_dots = 0.5)
anomalies = recomposed %>% dplyr::filter(anomaly == 'Yes')
attr(anomalies, "class") <- "anomaly"
anomalies$decompose = decomposed_plot
anomalies$recompose = recomposed_plot
return(anomalies)
}
print.anomaly <- function(obj){
data.frame(obj$Datetime, obj$observed)
}
plot.anomaly <- function(obj) {
obj$decompose
obj$recompose
}
a = anomaly_detect()
print(a)
plot(a)
anomaly_detect <- function(data = offers, x = Datetime, y = VWAP, gsplit=FALSE){
#set up for offer data, otherwise leave generic
cols = c('TradingDate', 'TradingPeriod','ParticipantCode','Tranche','Megawatts', 'DollarsPerMegawattHour')
if (all(cols %in% colnames(data))){
data = tidyr::fill(data, .direction = 'updown')
data[data['DollarsPerMegawattHour'] == 0, 'DollarsPerMegawattHour'] = 0.01
#data = data %>% dplyr::group_by(Datetime, ParticipantCode) %>% dplyr::mutate(VWAP = (cumsum(Megawatts*DollarsPerMegawattHour))/(cumsum(Megawatts)), .keep='used')
if (!gsplit){
data.grp = data %>% dplyr::group_by(Datetime) %>% dplyr::summarise(VWAP = sum(Megawatts*DollarsPerMegawattHour)/sum(Megawatts))
} else {
data.grp = data %>% dplyr::group_by(Datetime, ParticipantCode) %>% dplyr::summarise(VWAP = sum(Megawatts*DollarsPerMegawattHour)/sum(Megawatts))
}
}
x = enquo(x)
y = enquo(y)
data.grp = data.grp %>% tibble::as_tibble() %>%
dplyr::mutate(x = lubridate::ymd_hms(!!x)) %>%
dplyr::arrange(x) %>%
tibbletime::as_tbl_time(index = x)
decomposed = data.grp %>% anomalize::time_decompose(!!y, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize::anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.1)
decomposed_plot = decomposed %>% anomalize::plot_anomaly_decomposition()
recomposed = data.grp %>% anomalize::time_decompose(!!y) %>%
anomalize::anomalize(remainder) %>%
anomalize::time_recompose()
recomposed_plot = recomposed %>% anomalize::plot_anomalies(time_recomposed = TRUE, ncol = 4, alpha_dots = 0.5)
anomalies = recomposed %>% dplyr::filter(anomaly == 'Yes')
attr(anomalies, "class") <- "anomaly"
anomalies$decompose = decomposed_plot
anomalies$recompose = recomposed_plot
return(anomalies)
}
print.anomaly <- function(obj){
return(data.frame(obj$Datetime, obj$observed))
}
plot.anomaly <- function(obj) {
return(obj$decompose,obj$recompose)
}
a = anomaly_detect()
print(a)
plot(a)
anomaly_detect <- function(data = offers, x = Datetime, y = VWAP, gsplit=FALSE){
#set up for offer data, otherwise leave generic
cols = c('TradingDate', 'TradingPeriod','ParticipantCode','Tranche','Megawatts', 'DollarsPerMegawattHour')
if (all(cols %in% colnames(data))){
data = tidyr::fill(data, .direction = 'updown')
data[data['DollarsPerMegawattHour'] == 0, 'DollarsPerMegawattHour'] = 0.01
#data = data %>% dplyr::group_by(Datetime, ParticipantCode) %>% dplyr::mutate(VWAP = (cumsum(Megawatts*DollarsPerMegawattHour))/(cumsum(Megawatts)), .keep='used')
if (!gsplit){
data.grp = data %>% dplyr::group_by(Datetime) %>% dplyr::summarise(VWAP = sum(Megawatts*DollarsPerMegawattHour)/sum(Megawatts))
} else {
data.grp = data %>% dplyr::group_by(Datetime, ParticipantCode) %>% dplyr::summarise(VWAP = sum(Megawatts*DollarsPerMegawattHour)/sum(Megawatts))
}
}
x = enquo(x)
y = enquo(y)
data.grp = data.grp %>% tibble::as_tibble() %>%
dplyr::mutate(x = lubridate::ymd_hms(!!x)) %>%
dplyr::arrange(x) %>%
tibbletime::as_tbl_time(index = x)
decomposed = data.grp %>% anomalize::time_decompose(!!y, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize::anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.1)
decomposed_plot = decomposed %>% anomalize::plot_anomaly_decomposition()
recomposed = data.grp %>% anomalize::time_decompose(!!y) %>%
anomalize::anomalize(remainder) %>%
anomalize::time_recompose()
recomposed_plot = recomposed %>% anomalize::plot_anomalies(time_recomposed = TRUE, ncol = 4, alpha_dots = 0.5)
anomalies = recomposed %>% dplyr::filter(anomaly == 'Yes')
attr(anomalies, "class") <- "anomaly"
anomalies$decompose = decomposed_plot
anomalies$recompose = recomposed_plot
return(anomalies)
}
print.anomaly <- function(obj){
data.frame(obj$Datetime, obj$observed)
}
plot.anomaly <- function(obj, type='d') {
if (type == 'd'){
return(obj$decompose)
} else {
return(obj$recompose)
}
}
a = anomaly_detect()
print(a)
plot(a)
anomaly_detect <- function(data = offers, x = Datetime, y = VWAP, gsplit=FALSE){
#set up for offer data, otherwise leave generic
cols = c('TradingDate', 'TradingPeriod','ParticipantCode','Tranche','Megawatts', 'DollarsPerMegawattHour')
if (all(cols %in% colnames(data))){
data = tidyr::fill(data, .direction = 'updown')
data[data['DollarsPerMegawattHour'] == 0, 'DollarsPerMegawattHour'] = 0.01
#data = data %>% dplyr::group_by(Datetime, ParticipantCode) %>% dplyr::mutate(VWAP = (cumsum(Megawatts*DollarsPerMegawattHour))/(cumsum(Megawatts)), .keep='used')
if (!gsplit){
data.grp = data %>% dplyr::group_by(Datetime) %>% dplyr::summarise(VWAP = sum(Megawatts*DollarsPerMegawattHour)/sum(Megawatts))
} else {
data.grp = data %>% dplyr::group_by(Datetime, ParticipantCode) %>% dplyr::summarise(VWAP = sum(Megawatts*DollarsPerMegawattHour)/sum(Megawatts))
}
}
x = enquo(x)
y = enquo(y)
data.grp = data.grp %>% tibble::as_tibble() %>%
dplyr::mutate(x = lubridate::ymd_hms(!!x)) %>%
dplyr::arrange(x) %>%
tibbletime::as_tbl_time(index = x)
decomposed = data.grp %>% anomalize::time_decompose(!!y, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize::anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.1)
decomposed_plot = decomposed %>% anomalize::plot_anomaly_decomposition()
recomposed = data.grp %>% anomalize::time_decompose(!!y) %>%
anomalize::anomalize(remainder) %>%
anomalize::time_recompose()
recomposed_plot = recomposed %>% anomalize::plot_anomalies(time_recomposed = TRUE, ncol = 4, alpha_dots = 0.5)
anomalies = recomposed %>% dplyr::filter(anomaly == 'Yes')
attr(anomalies, "class") <- "anomaly"
anomalies$decompose = decomposed_plot
anomalies$recompose = recomposed_plot
return(anomalies)
}
print.anomaly <- function(obj){
data.frame(obj$Datetime, obj$observed)
}
plot.anomaly <- function(obj, decom=TRUE) {
if (decom){
return(obj$decompose)
} else {
return(obj$recompose)
}
}
a = anomaly_detect()
print(a)
plot(a, 'r')
anomaly_detect <- function(data = offers, x = Datetime, y = VWAP, gsplit=FALSE){
#set up for offer data, otherwise leave generic
cols = c('TradingDate', 'TradingPeriod','ParticipantCode','Tranche','Megawatts', 'DollarsPerMegawattHour')
if (all(cols %in% colnames(data))){
data = tidyr::fill(data, .direction = 'updown')
data[data['DollarsPerMegawattHour'] == 0, 'DollarsPerMegawattHour'] = 0.01
#data = data %>% dplyr::group_by(Datetime, ParticipantCode) %>% dplyr::mutate(VWAP = (cumsum(Megawatts*DollarsPerMegawattHour))/(cumsum(Megawatts)), .keep='used')
if (!gsplit){
data.grp = data %>% dplyr::group_by(Datetime) %>% dplyr::summarise(VWAP = sum(Megawatts*DollarsPerMegawattHour)/sum(Megawatts))
} else {
data.grp = data %>% dplyr::group_by(Datetime, ParticipantCode) %>% dplyr::summarise(VWAP = sum(Megawatts*DollarsPerMegawattHour)/sum(Megawatts))
}
}
x = enquo(x)
y = enquo(y)
data.grp = data.grp %>% tibble::as_tibble() %>%
dplyr::mutate(x = lubridate::ymd_hms(!!x)) %>%
dplyr::arrange(x) %>%
tibbletime::as_tbl_time(index = x)
decomposed = data.grp %>% anomalize::time_decompose(!!y, method = "stl", frequency = "auto", trend = "auto") %>%
anomalize::anomalize(remainder, method = "gesd", alpha = 0.05, max_anoms = 0.1)
decomposed_plot = decomposed %>% anomalize::plot_anomaly_decomposition()
recomposed = data.grp %>% anomalize::time_decompose(!!y) %>%
anomalize::anomalize(remainder) %>%
anomalize::time_recompose()
recomposed_plot = recomposed %>% anomalize::plot_anomalies(time_recomposed = TRUE, ncol = 4, alpha_dots = 0.5)
anomalies = recomposed %>% dplyr::filter(anomaly == 'Yes')
attr(anomalies, "class") <- "anomaly"
anomalies$decompose = decomposed_plot
anomalies$recompose = recomposed_plot
return(anomalies)
}
print.anomaly <- function(obj){
data.frame(obj$Datetime, obj$observed)
}
plot.anomaly <- function(obj, decom=TRUE) {
if (decom){
return(obj$decompose)
} else {
return(obj$recompose)
}
}
a = anomaly_detect()
print(a)
plot(a)
devtools::load_all()
